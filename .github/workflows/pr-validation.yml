name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - master
      - develop
      - release-flyio

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Buscar hist√≥rico completo para an√°lise

      - name: Instalar o uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Instalar depend√™ncias
        run: uv sync

      - name: Verificar sintaxe Python
        run: |
          echo "üîç Verificando sintaxe Python..."
          uv run python -m py_compile app/**/*.py
          echo "‚úÖ Sintaxe Python v√°lida"

      - name: Executar testes r√°pidos
        run: |
          echo "üß™ Executando testes r√°pidos..."
          uv run pytest tests/test_opportunities.py::TestValidateCpfCnpj -v
          echo "‚úÖ Testes de valida√ß√£o passaram"

      - name: Verificar importa√ß√µes cr√≠ticas
        run: |
          echo "üì¶ Verificando importa√ß√µes cr√≠ticas..."
          uv run python -c "
          import app.main
          import app.services.crm_service
          import app.schemas.schemas
          from app.routers.crm_endpoints import router
          print('‚úÖ Todas as importa√ß√µes cr√≠ticas funcionam!')
          "

      - name: Verificar estrutura da API
        run: |
          echo "üåê Verificando estrutura da API..."
          uv run python -c "
          from fastapi.testclient import TestClient
          from app.main import app
          
          client = TestClient(app)
          response = client.get('/docs')
          assert response.status_code == 200, 'Docs endpoint n√£o dispon√≠vel'
          
          response = client.get('/health')
          assert response.status_code == 200, 'Health endpoint n√£o dispon√≠vel'
          
          print('‚úÖ Estrutura da API v√°lida!')
          "

      - name: An√°lise de mudan√ßas
        run: |
          echo "üìä Analisando mudan√ßas no PR..."
          
          # Arquivos modificados
          git diff --name-only origin/${{ github.base_ref }}..HEAD > changed_files.txt
          
          echo "**Arquivos modificados:**"
          cat changed_files.txt
          
          # Verificar se testes foram afetados
          if grep -q "app/" changed_files.txt; then
            echo "‚ö†Ô∏è C√≥digo da aplica√ß√£o foi modificado"
            echo "‚úÖ Executando testes completos..."
            uv run pytest tests/ -v --tb=short
          else
            echo "‚ÑπÔ∏è Apenas arquivos de documenta√ß√£o/config foram modificados"
          fi

      - name: Verificar commits
        run: |
          echo "üìù Verificando formato dos commits..."
          
          # Verificar se commits seguem algum padr√£o
          git log --oneline origin/${{ github.base_ref }}..HEAD > commits.txt
          
          echo "**Commits no PR:**"
          cat commits.txt
          
          # Contagem de commits
          COMMIT_COUNT=$(wc -l < commits.txt)
          echo "üìä Total de commits: $COMMIT_COUNT"
          
          if [ $COMMIT_COUNT -gt 10 ]; then
            echo "‚ö†Ô∏è PR com muitos commits ($COMMIT_COUNT). Considere fazer squash."
          else
            echo "‚úÖ N√∫mero de commits adequado"
          fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar o uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Instalar depend√™ncias
        run: uv sync

      - name: Verificar secrets/senhas hardcoded
        run: |
          echo "üîí Verificando por secrets hardcoded..."
          
          # Buscar padr√µes suspeitos
          if grep -r -i "password\s*=\s*['\"]" app/ --include="*.py" | grep -v "ODOO_PASSWORD"; then
            echo "‚ùå Poss√≠vel senha hardcoded encontrada!"
            exit 1
          fi
          
          if grep -r -i "secret\s*=\s*['\"]" app/ --include="*.py"; then
            echo "‚ùå Poss√≠vel secret hardcoded encontrado!"
            exit 1
          fi
          
          if grep -r -i "token\s*=\s*['\"]" app/ --include="*.py"; then
            echo "‚ùå Poss√≠vel token hardcoded encontrado!"
            exit 1
          fi
          
          echo "‚úÖ Nenhum secret hardcoded encontrado"

      - name: Verificar depend√™ncias vulner√°veis
        run: |
          echo "üõ°Ô∏è Verificando depend√™ncias vulner√°veis..."
          uv pip install safety
          uv run safety check || echo "‚ö†Ô∏è Avisos de seguran√ßa encontrados - verificar manualmente"

  comment-results:
    name: Comment Results
    runs-on: ubuntu-latest
    needs: [validate-pr, security-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Comentar resultados
        uses: actions/github-script@v6
        with:
          script: |
            const validationResult = '${{ needs.validate-pr.result }}';
            const securityResult = '${{ needs.security-check.result }}';
            
            let comment = '## üîç Valida√ß√£o do Pull Request\n\n';
            
            // Resultados dos jobs
            comment += '### Resultados:\n';
            comment += `- **Valida√ß√£o:** ${validationResult === 'success' ? '‚úÖ Passou' : '‚ùå Falhou'}\n`;
            comment += `- **Seguran√ßa:** ${securityResult === 'success' ? '‚úÖ Passou' : '‚ùå Falhou'}\n\n`;
            
            // Status geral
            if (validationResult === 'success' && securityResult === 'success') {
              comment += 'üéâ **Todas as verifica√ß√µes passaram!** Este PR est√° pronto para review.\n\n';
              comment += '### Pr√≥ximos passos:\n';
              comment += '1. ‚úÖ Aguardar review do c√≥digo\n';
              comment += '2. ‚úÖ Verificar se os testes passam\n';
              comment += '3. ‚úÖ Merge quando aprovado\n';
            } else {
              comment += '‚ö†Ô∏è **Algumas verifica√ß√µes falharam.** Por favor, verifique os logs e corrija os problemas.\n\n';
              comment += '### A√ß√µes necess√°rias:\n';
              if (validationResult !== 'success') {
                comment += '- ‚ùå Corrigir problemas de valida√ß√£o\n';
              }
              if (securityResult !== 'success') {
                comment += '- ‚ùå Resolver problemas de seguran√ßa\n';
              }
            }
            
            comment += '\n---\n';
            comment += 'ü§ñ *Coment√°rio autom√°tico gerado pelo GitHub Actions*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });